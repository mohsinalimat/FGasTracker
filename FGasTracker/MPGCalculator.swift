//
//  MPGCalculator.swift
//  FGasTracker
//
//  Created by Matthew Dean Furlo on 10/29/15.
//  Copyright Â© 2015 FurloBros. All rights reserved.
//

import Foundation

class MPGCalculator {
    
    /* welcome to the MPG calcultor engine. classes primary prupose is to take an array of gas fill objects and return an averge MPG. It does that. Mission accomplised. */
    
    var displaySignificantFigures: Int
    
    let significantFigures: Int = 3
    //Integer math is awesome for dealing with truncated decimals. It's more precise then double math where rounding errors can be annoying. Just gotta keep track of those decimal places.
    let sigFigMultiplier: Int
    
    lazy var zeroString: String = {
        var tempZeroString = "0"
        
        if self.significantFigures <= 0 {
            tempZeroString = "0"
        } else {
            tempZeroString = "0."
            
            for var index = 0; index < self.significantFigures; ++index {
                tempZeroString = tempZeroString + "0"
            }
        }
        
        return tempZeroString
    }()
    
    init(sigfig: Int){
        self.displaySignificantFigures = sigfig
        sigFigMultiplier = Int(pow(Double(10),Double(significantFigures)))
    }
    
    func calculateAverageMPG(fillUps: [GasFill]?) -> String{
        var totalMPG:Int = 0
        var mpgCount:Int = 0
        var totalOdometer: Int?
        var lastFillComplete=false
        
        //the array is generated by the fetch controller in reverse cronological order. If it exists, go ahead and flip it back around.
        if let fillUps = fillUps?.reverse() {
            for fill in fillUps {
                //for each element in the array, first check if the trip is set. If so, add it to the total miles traveled (if it exists)
                if let trip = fill.trip {
                    if let totalOdom = totalOdometer{
                        totalOdometer = Int(trip) + totalOdom
                    }
                    //if the last fill wasn't complete that will throw off the calculation. If the switch isn't seleceted, don't include it in the average.
                    if lastFillComplete{
                        //check that there is a value for gallons and it is larger than zero. If not, just ignore it. It won't be part of the average.
                        if let gallons = fill.gallons {
                            if Int(gallons) > 0{
                                //if successful calculate the MPG for that fill and incrememnt the count
                                totalMPG += calcSingleMPG(trip, gallons: gallons)
                                mpgCount++
                            }
                        }
                    }
                } else if let totalMiles = fill.totalMilage {
                    //if the trip wasn't set, we can try to use the total mileage.
                    if let totalOdom = totalOdometer{
                        //again, check to make sure the last fill was complete
                        if lastFillComplete {
                            //you can create a trip value by subtracting the current odometer value from the previous value.
                            let trip = Int(totalMiles)*10 - totalOdom
                            if let gallons = fill.gallons{
                                if Int(gallons) > 0{
                                    //if successful calculate the MPG for that fill and incrememnt the count
                                    totalMPG += calcSingleMPG(trip, gallons: gallons)
                                    mpgCount++
                                }
                            }
                        }
                    }
                    //set the odometer for the next calculation. By multiplying by ten it keeps it at the same significant figures as a trip.
                    totalOdometer = Int(totalMiles)*10
                }
                //if the fill was complete, set the lastFillComplete to be used on the next pass through the for loop
                lastFillComplete = fill.completeFill
            }
            if mpgCount > 0 {
                //check to make sure there was a succesful MPG calculation then create a string from the average MPG
                return createString(totalMPG/mpgCount)
            } else {
                return "Add More Fills"
            }
            
        }
        return "N/A"
    }
    
    func calcSingleMPG(miles: NSNumber, gallons: NSNumber) -> Int {
        //to create the MPG with the correct significant firgures (two decimal places) we must first multiply by the 1000 of the gallons sig figs, then the 100 to bring it to 2 places after devision.
        let mpg = (Int(miles)*100*sigFigMultiplier)/(Int(gallons))
        return mpg
    }
    
    func createString(gallons: Int) -> String{
        //creates a string from the integer at the correct sig figs. Which is 3, but the display sig figs is 2. So just chop the last value from string.
        let displayString = stringFromInt(gallons)
        return displayString.substringToIndex(displayString.endIndex.advancedBy(displaySignificantFigures-significantFigures))
    }
    
    /* the next section is used to convert the Int into a string. These functions are very similar to the intgerTextField with a few tweaks for significant figures. */
    
    func stringFromInt(digitText: Int?) -> String{
        var newText: String
        
        if significantFigures > 0 {
            if let intNumber = digitText {
                newText =  self.integerStringFromInt(intNumber) + "." + self.decimalStringFromInt(intNumber)
            } else {
                newText = self.zeroString
            }
        } else {
            if let intNumber = digitText {
                newText =  self.integerStringFromInt(intNumber)
            } else {
                newText = self.zeroString
            }
        }
        return newText
    }
    
    func integerStringFromInt(value: Int) -> String {
        let numberToAddCommas = String(value/Int(pow(Double(10),Double(self.significantFigures))))
        
        let digits = NSCharacterSet.decimalDigitCharacterSet()
        var intDigitText = ""
        var i = numberToAddCommas.unicodeScalars.count - 1
        for c in numberToAddCommas.unicodeScalars{
            if digits.longCharacterIsMember(c.value){
                intDigitText.append(c)
                if (i%3 == 0 && i != 0){
                    intDigitText = intDigitText + ","
                }
                i--
            }
        }
        
        return intDigitText
        
    }
    
    func decimalStringFromInt(value: Int) -> String{
        let devisor = Int(pow(Double(10),Double(self.significantFigures)))
        let decimal = value % devisor
        var decimalString = String(decimal)
        var check = 10
        
        for var index = 1; index < significantFigures; ++index {
            
            //print(check)
            if decimal < check {
                decimalString = "0" + decimalString
            }
            check = check * 10
        }
        
        return decimalString
        
    }
}